{"version":3,"file":"static/js/204.67825524.chunk.js","mappings":"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","sources":["components/Auth/LoginForm/LoginForm.jsx","pages/AuthPage/LoginPage/LoginPage.styled.js","pages/AuthPage/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { signin, signinWithToken } from 'redux/auth/auth-operations';\nimport { useTranslation, Trans } from 'react-i18next';\n\nimport Logo from 'components/Logo/Logo';\nimport Modal from 'components/Modal/Modal';\nimport { Button, StyledLink } from 'styles/Shared.styled';\nimport {\n  AuthContainer,\n  LogoWrapper,\n  FormWrapper,\n  StyledForm,\n  StyledLabel,\n  StyledField,\n  EmailLogo,\n  PasswordLogo,\n  EyeLogo,\n  AuthError,\n  ButtonWrapper,\n  GoogleLogo,\n  ButtonGoogle,\n} from '../Auth.styled';\n\nimport { getAuthError } from 'redux/auth/auth-selectors';\nimport { clearAuthError } from 'redux/auth/auth-slice';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport { emailRegexp } from '../../../variables/Regexp';\n\nconst LoginForm = () => {\n  const [inputType, setInputType] = useState('password');\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n\n  const authError = useSelector(getAuthError);\n\n  const token = searchParams.get('token');\n\n  if (token) {\n    dispatch(signinWithToken({ token }));\n  }\n\n  const validationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .matches(emailRegexp, `${t('loginForm.email_matches')}`)\n      .required(`${t('loginForm.email_required')}`),\n    password: yup.string().required(`${t('loginForm.password_required')}`),\n  });\n\n  const onSubmit = values => {\n    dispatch(signin(values));\n  };\n\n  const handleModalClose = () => {\n    dispatch(clearAuthError());\n  };\n\n  const handleSetInputTypePush = () => {\n    setInputType('string');\n  };\n\n  const handleSetInputTypeUp = () => {\n    setInputType('password');\n  };\n\n  return (\n    <>\n      <AuthContainer>\n        <FormWrapper>\n          <LogoWrapper>\n            <Logo />\n          </LogoWrapper>\n          <Formik\n            initialValues={{\n              email: '',\n              password: '',\n            }}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n          >\n            {({ values, errors, touched, handleChange, handleSubmit }) => (\n              <StyledForm onSubmit={handleSubmit}>\n                <StyledLabel>\n                  <StyledField\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"E-mail\"\n                    value={values.name}\n                    onChange={handleChange}\n                  />\n                  <EmailLogo />\n                  {touched.email && errors.email && (\n                    <AuthError>{errors.email}</AuthError>\n                  )}\n                </StyledLabel>\n                <StyledLabel>\n                  <StyledField\n                    name=\"password\"\n                    type={inputType}\n                    placeholder={`${t('loginForm.password_placeholder')}`}\n                    value={values.name}\n                    required={true}\n                    onChange={handleChange}\n                  />\n                  <PasswordLogo />\n                  <EyeLogo\n                    onMouseDown={handleSetInputTypePush}\n                    onMouseUp={handleSetInputTypeUp}\n                  />\n                  {((errors.password && values.password) ||\n                    touched.password) && (\n                    <AuthError>{errors.password}</AuthError>\n                  )}\n                </StyledLabel>\n                <ButtonWrapper>\n                  <Button primary marginBotom=\"20px\" type=\"submit\">\n                    {t('loginForm.signInButton')}\n                  </Button>\n                  <StyledLink to=\"/signup\" outlined=\"true\">\n                    {t('loginForm.signUpButton')}\n                  </StyledLink>\n                  {/* <ButtonGoogle href=\"https://walletback-production.up.railway.app/api/users/google\"> */}\n                  <ButtonGoogle href=\"https://wallet-back-onrender.onrender.com/api/users/google\">\n                    <Trans i18nKey=\"loginForm.signInGoogle\">\n                      SIGN IN WITH\n                      <GoogleLogo />\n                      OOGLE\n                    </Trans>\n                  </ButtonGoogle>\n                </ButtonWrapper>\n              </StyledForm>\n            )}\n          </Formik>\n        </FormWrapper>\n      </AuthContainer>\n      {authError && (\n        <Modal toggleModal={handleModalClose} isSignIn={false}>\n          <ErrorMessage message={authError}></ErrorMessage>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import styled from \"styled-components\";\nimport { device } from \"styles/Media.variables\";\n\nexport const LoginImg = styled.img`\n\t@media ${device.tabletOnly} {\n    margin-right: 40px;\n\t\twidth: 261px;\n\t\theight: 250px;\n\t}\n\n\t@media ${device.desktop} {\n\t\tmargin-bottom: 32px;\n\t\twidth: 435px;\n\t\theight: 420px;\n\t}\n`;","import { useMediaQuery } from 'react-responsive';\nimport { useSelector } from 'react-redux';\n\nimport Loader from 'components/Loader/Loader';\nimport LoginForm from 'components/Auth/LoginForm/LoginForm';\nimport { Title } from 'styles/Shared.styled';\nimport { LoginImg } from './LoginPage.styled';\nimport {\n  AuthContainer,\n  StyledAuthForm,\n  AuthHero,\n  LanguageButtonContainer,\n  DarkThemeContainer,\n} from '../AuthPage.styled';\n\nimport { getFirstLoading, getLoading } from 'redux/auth/auth-selectors';\n\nimport { LanguagesSwitcher } from 'components/LanguagesSwitcher/LanguagesSwitcher';\nimport SigninTab from 'images/auth/SigninAppTab.png';\nimport SigninTab2x from 'images/auth/SigninAppTab@2x.png';\nimport SigninDesk from 'images/auth/SigninAppDesk.png';\nimport SigninDesk2x from 'images/auth/SigninAppDeskt@2x.png';\n\nconst LoginPage = () => {\n  const isntMobile = useMediaQuery({ minWidth: 768 });\n  const isFirstLoading = useSelector(getFirstLoading);\n\n  const loading = useSelector(getLoading);\n\n  return isFirstLoading ? (\n    <Loader />\n  ) : (\n    <>\n      {loading && <Loader />}\n      <StyledAuthForm>\n        <DarkThemeContainer>\n          <AuthContainer>\n            <LanguageButtonContainer>\n              <LanguagesSwitcher />\n            </LanguageButtonContainer>\n            {isntMobile && (\n              <AuthHero>\n                <div>\n                  <picture>\n                    <source\n                      media=\"(min-width: 1280px)\"\n                      srcSet={`${SigninDesk} 1x, ${SigninDesk2x} 2x`}\n                      type=\"image/png\"\n                    />\n                    <source\n                      media=\"(min-width: 768px)\"\n                      srcSet={`${SigninTab} 1x, ${SigninTab2x} 2x`}\n                      type=\"image/png\"\n                    />\n                    <LoginImg src={SigninTab} alt=\"Finance App\" />\n                  </picture>\n                </div>\n                <Title>Finance App</Title>\n              </AuthHero>\n            )}\n\n            <LoginForm />\n          </AuthContainer>\n        </DarkThemeContainer>\n      </StyledAuthForm>\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"names":["useState","inputType","setInputType","t","useTranslation","dispatch","useDispatch","useSearchParams","searchParams","authError","useSelector","getAuthError","token","get","signinWithToken","validationSchema","yup","shape","email","matches","emailRegexp","required","password","handleSetInputTypePush","handleSetInputTypeUp","Logo","initialValues","onSubmit","values","signin","errors","touched","handleChange","handleSubmit","name","type","placeholder","value","onChange","onMouseDown","onMouseUp","primary","marginBotom","to","outlined","href","i18nKey","Modal","toggleModal","clearAuthError","isSignIn","ErrorMessage","message","LoginImg","styled","device","isntMobile","useMediaQuery","minWidth","isFirstLoading","getFirstLoading","loading","getLoading","Loader","LanguagesSwitcher","media","srcSet","SigninDesk","SigninDesk2x","SigninTab","SigninTab2x","src","alt"],"sourceRoot":""}